from typing import Dict, List, Union
from instaclient import InstaClient
from pathlib import Path
from instaclient.errors import *
import json
from tqdm import tqdm
from graph import Graph


def initialize_user_followers() -> Dict[str, List[str]]:
    try:
        with open(file_path, 'r') as f_file:
            return json.loads(f_file.read())
    except FileNotFoundError:
        with open(file_path, 'x') as _:
            pass
        with open(file_path, 'r') as f_file:
            return json.loads(f_file.read())


def login_client():
    """
This method logs in through the instaclient with 2FA where needed.
    """
    pwd = input("Please enter your password: ")
    try:
        client.login(username=USR_NAME, password=pwd)  # Go through Login Procedure
    except VerificationCodeNecessary:
        # This error is raised if the user has 2FA turned on.
        code = input('Enter the 2FA security code generated by your Authenticator App or sent to you by SMS')
        client.input_verification_code(int(code))
    except SuspisciousLoginAttemptError as error:
        # This error is raised by Instagram
        if error.mode == SuspisciousLoginAttemptError.EMAIL:
            code = input('Enter the security code that was sent to you via email: ')
        else:
            code = input('Enter the security code that was sent to you via SMS: ')
        client.input_security_code(int(code))


def get_followers(username, count) -> List[str]:
    try:
        [followers, _] = client.get_followers(user=username, count=count, use_api=True)
        user_followers[username] = [follower["username"] for follower in followers]
        with open(file_path, 'w') as file:
            file.write(str(json.dumps(user_followers)))
        return user_followers[username]
    except:
        client.logout()


def get_own_followers(load=True, count=None) -> List[str]:
    """
    :param load: When enabled (=True), the followers are to be loaded from the user_followers object if the USR_NAME
    appears in it
    :param count: When enabled (!= None), it only scrapes up to the given amount :return: A list of
    one's own followers
    """
    if load and USR_NAME in user_followers:
        return user_followers[USR_NAME]
    else:
        return get_followers(USR_NAME, count)


def get_second_degree_followers(own_followers: List[str], count: int = 25):
    for my_follower in tqdm(own_followers, desc="Followers"):
        get_followers(my_follower, count)


def scrape(range_start: int, range_end: int, second_degree: int):
    """
    Always scrape 50 1st degree users, i.e. range_end - range_start <= 50
    :param range_start: start of 1st degree users
    :param range_end: end (not including) 1st degree users
    :param second_degree: number of second degree users
    """
    login_client()
    my_followers: List[str] = get_own_followers()[range_start:range_end]
    get_second_degree_followers(my_followers, second_degree)
    client.logout()


# Create a Instaclient object. Place as driver_path argument the path that leads to where you saved the
# chromedriver.exe file
file_path = Path.cwd() / 'followers.json'
user_followers: Dict[str, List[str]] = initialize_user_followers()
client = InstaClient(driver_path=str(Path.cwd() / 'chromedriver.exe'), localhost_headless=False)
USR_NAME: str = input("Please enter your user name: ")
# scrape(151, 201, 30)
Graph(USR_NAME, user_followers).render(html_page='hrep.html')
