import json
from pathlib import Path
from typing import List, Union

from instaclient import InstaClient
from instaclient.errors import *
from tqdm import tqdm


class Client(InstaClient):
    def __init__(self, username: str, file_path: Union[Path, str]):
        super().__init__(driver_path=str(Path.cwd() / 'chromedriver.exe'),
                         localhost_headless=False)
        self.username = username
        self.file_path = file_path
        self.user_followers = {}

    def __enter__(self):
        self.login_client()

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.logout()

    def login_client(self):
        """
    This method logs in through the instaclient with 2FA where needed.
        """
        pwd = input("Please enter your password: ")
        try:
            self.login(username=self.username, password=pwd)  # Go through Login Procedure
        except VerificationCodeNecessary:
            # This error is raised if the user has 2FA turned on.
            code = input(
                'Enter the 2FA security code generated by your Authenticator App or sent to you '
                'by SMS')
            self.input_verification_code(int(code))
        except SuspisciousLoginAttemptError as error:
            # This error is raised by Instagram
            if error.mode == SuspisciousLoginAttemptError.EMAIL:
                code = input('Enter the security code that was sent to you via email: ')
            else:
                code = input('Enter the security code that was sent to you via SMS: ')
            self.input_security_code(int(code))

    def obtain_followers(self, username, count) -> List[str]:
        try:
            [followers, _] = self.get_followers(user=username, count=count, use_api=True)
            self.user_followers[username] = [follower["username"] for follower in followers]
            with open(self.file_path, 'w') as file:
                file.write(str(json.dumps(self.user_followers)))
            return self.user_followers[username]
        except:
            self.logout()

    def get_own_followers(self, load=True, count=None) -> List[str]:
        """
        :param load: When enabled (=True), the followers are to be loaded from the user_followers
        object if the USR_NAME appears in it
        :param count: When enabled (!= None),it only scrapes up to the given amount
        :return: A list of one's own followers
        """
        if load and self.username in self.user_followers:
            return self.user_followers[self.username]
        else:
            return self.get_followers(self.username, count)

    def get_second_degree_followers(self, own_followers: List[str], count: int = 25):
        for my_follower in tqdm(own_followers, desc="Followers"):
            self.obtain_followers(my_follower, count)

    def scrape(self, range_start: int, range_end: int, second_degree: int):
        """
        Always scrape 50 1st degree users, i.e. range_end - range_start <= 50
        :param range_start: start of 1st degree users
        :param range_end: end (not including) 1st degree users
        :param second_degree: number of second degree users
        """
        my_followers: List[str] = self.get_own_followers()[range_start:range_end]
        self.get_second_degree_followers(my_followers, second_degree)
